C51 COMPILER V9.01   ISR                                                                   08/07/2021 09:31:09 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN .\build\isr.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main\isr.c LARGE OMF2 OPTIMIZE(9,SPEED) BROWSE INCDIR(..\..\libraries;..
                    -\..\libraries\core;..\..\libraries\core\register\STC8x;..\..\libraries\core\startup\STC8x;..\..\libraries\drives;..\..\l
                    -ibraries\drives\KeyScan;..\..\libraries\peripherals;..\..\libraries\peripherals\STC8x\inc;..\..\libraries\peripherals\ST
                    -C8x\src;..\..\libraries\components;..\..\libraries\components\TMT;..\..\libraries\components\PrintfRed;..\..\libraries\c
                    -omponents\PreDelay;.\main;.\application) DEBUG PRINT(.\build\isr.lst) OBJECT(.\build\isr.obj)

line level    source

   1          /*-----------------------------------------------------------------------
   2          |                            FILE DESCRIPTION                           |
   3          -----------------------------------------------------------------------*/
   4          /*----------------------------------------------------------------------
   5            - File name     : isr.c
   6            - Author        : zeweni
   7            - Update date   : 2020.01.11
   8            -     Copyright(C)  : 2020-2021 zeweni. All rights reserved.
   9          -----------------------------------------------------------------------*/
  10          /*-----------------------------------------------------------------------
  11          |                               INCLUDES                                |
  12          -----------------------------------------------------------------------*/
  13          #include "main.h"
  14          /*-----------------------------------------------------------------------
  15          |                                 DATA                                  |
  16          -----------------------------------------------------------------------*/
  17          /* None */
  18          /*-----------------------------------------------------------------------
  19          |                               FUNCTION                                |
  20          -----------------------------------------------------------------------*/
  21          
  22          
  23          u8 G_KEY_VALUE = 1;                                             //¼üÖµ1-10
  24          u8 Timer0_ISRQ_Length_30 = 30;
  25          
  26          u8 FLAG_EXTISource_0 = 0;                               //Íâ²¿0ÖÐ¶Ï½øÈë±êÖ¾Î»
  27          u8 FLAG_EXTISource_1 = 0;                               //Íâ²¿1ÖÐ¶Ï½øÈë±êÖ¾Î»
  28          
  29          u8 AB_Delat_Time_ms = 0;                                //Á½ÏàÊ±¼ä²î
  30          u8 AB_Delat_Time_EN = 0;                                //ÏàÐò²âÁ¿Ê¹ÄÜ
  31          /**
  32            * @name    TIMER0_ISRQ_Handler--IO OUTPUT
  33            * @brief   MCU TIMER0 Interrupt request service function
  34            * @param   None
  35            * @return  None
  36          ***/
  37          void TIMER0_ISRQ_Handler(void)
  38          {
  39   1          static u8 key_up = 0;                               //°´¼üËÉ¿ª±êÖ¾Î»
  40   1          static timer0_count_2 = 0;
  41   1      //      if(++timer0_count_1 >= (G_KEY_VALUE * Timer0_ISRQ_Length_step))
  42   1      //      {
  43   1      //              timer0_count_1 = 0;
  44   1      //              P16 = ~P16;
  45   1      //              P17 = ~P17;
  46   1      //      }
  47   1      
  48   1          //°´¼ü¼ì²â²¿·Ö
  49   1          if(++timer0_count_2 >= Timer0_ISRQ_Length_30)
  50   1          {
  51   2              timer0_count_2 = 0;
C51 COMPILER V9.01   ISR                                                                   08/07/2021 09:31:09 PAGE 2   

  52   2              if(G_KEY_VALUE > 10)    G_KEY_VALUE = 1;
  53   2              if(key_up && P55 == 0)
  54   2              {
  55   3                  key_up=0;
  56   3                  G_KEY_VALUE ++;
  57   3              }
  58   2              else if(P55 == 1)               key_up=1;
  59   2          }
  60   1      
  61   1          //Íâ²¿ÖÐ¶Ï¼ÆÊ±²¿·Ö
  62   1          if(AB_Delat_Time_EN && (FLAG_EXTISource_0 ^ FLAG_EXTISource_1))
  63   1          {
  64   2              AB_Delat_Time_ms ++;
  65   2          }
  66   1      }
  67          
  68          /**
  69            * @name    TIMER2_ISRQ_Handler--TO BE A TIMER
  70            * @brief   MCU TIMER2 Interrupt request service function
  71            * @param   None
  72            * @return  None
  73          ***/
  74          void TIMER2_ISRQ_Handler(void)
  75          {
  76   1      
  77   1      
  78   1          TIMER2_CLEAR_FLAG();                                //TIMER2ÐèÒªÊÖ¶¯Çå³ý±êÖ¾Î»
  79   1      }
  80          
  81          /**
  82            * @name    UART1_ISRQ_Handler
  83            * @brief   MCU UART1 Interrupt request service function
  84            * @param   None
  85            * @return  None
  86          ***/
  87          void UART1_ISRQ_Handler(void)
  88          {
  89   1          if(UART1_GET_RX_FLAG())
  90   1          {
  91   2              UART1_CLEAR_RX_FLAG();
  92   2              Auto_RST_download();
  93   2          }
  94   1          else if(UART1_GET_TX_FLAG())
  95   1          {
  96   2              UART1_CLEAR_TX_FLAG();
  97   2              UART1_CLEAR_BUSY_FLAG();
  98   2          }
  99   1      }
 100          
 101          /**
 102            * @name    EXTI0_ISRQ_Handler
 103            * @brief   MCU EXTI0 Interrupt request service function
 104            * @param   ÒòÎªÏµÍ³±ØÐëÎªÉÏÉýÑØ¼ì²â£¬¶ø³ÌÐòÉèÖÃÎª±ßÑØ£¬ËùÒÔÐèÒªÔÚ·þÎñº¯ÊýÄÚ²¿ÅÐ¶Ïµ±Ç°IO×´Ì¬£¬ÒÔ´ËÀ´´ïµ½É
             -ÏÉýÑØ¼ì²âµÄÐ§¹û
 105            * @return  None
 106          ***/
 107          void EXTI0_ISRQ_Handler(void)
 108          {
 109   1          if(P32)     FLAG_EXTISource_0 = 1;
 110   1      }
 111          
 112          /**
C51 COMPILER V9.01   ISR                                                                   08/07/2021 09:31:09 PAGE 3   

 113            * @name    EXTI1_ISRQ_Handler
 114            * @brief   MCU EXTI1 Interrupt request service function
 115            * @param   ÒòÎªÏµÍ³±ØÐëÎªÉÏÉýÑØ¼ì²â£¬¶ø³ÌÐòÉèÖÃÎª±ßÑØ£¬ËùÒÔÐèÒªÔÚ·þÎñº¯ÊýÄÚ²¿ÅÐ¶Ïµ±Ç°IO×´Ì¬£¬ÒÔ´ËÀ´´ïµ½É
             -ÏÉýÑØ¼ì²âµÄÐ§¹û
 116            * @return  None
 117          ***/
 118          void EXTI1_ISRQ_Handler(void)
 119          {
 120   1          if(P33)     FLAG_EXTISource_1 = 1;
 121   1      }
 122          /*--------------------------------------------------------
 123          | @Description: Interrupt service function               |
 124          --------------------------------------------------------*/
 125          /*
 126           * TIMER:
 127           * void TIMER0_ISRQ_Handler(void)
 128           * void TIMER1_ISRQ_Handler(void)
 129           * void TIMER2_ISRQ_Handler(void)
 130           * void TIMER3_ISRQ_Handler(void)
 131           * void TIMER4_ISRQ_Handler(void)
 132           *
 133           * UART:
 134           * void UART1_ISRQ_Handler(void)
 135           * void UART2_ISRQ_Handler(void)
 136           * void UART3_ISRQ_Handler(void)
 137           * void UART4_ISRQ_Handler(void)
 138           *
 139           * EXTI:
 140           * void EXTI0_ISRQ_Handler(void)
 141           * void EXTI1_ISRQ_Handler(void)
 142           * void EXTI2_ISRQ_Handler(void)
 143           * void EXTI3_ISRQ_Handler(void)
 144           *
 145           * ADC:
 146           * void ADC_ISRQ_Handler(void)
 147           *
 148           * COMP:
 149           * void COMP_ISRQ_Handler(void)
 150           *
 151           * PCA:
 152           * void PCA_ISRQ_Handler(void)
 153           *
 154           * LVD:
 155           * void LVD_ISRQ_Handler(void)
 156           *
 157           * PWM:
 158           * void PWM_ISRQ_Handler(void)
 159           * void PWM_ABD_ISRQ_Handler(void)
 160           *
 161           */
 162          
 163          /*-----------------------------------------------------------------------
 164          |                   END OF FLIE.  (C) COPYRIGHT zeweni                  |
 165          -----------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    281    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.01   ISR                                                                   08/07/2021 09:31:09 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
