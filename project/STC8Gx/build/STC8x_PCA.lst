C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE STC8X_PCA
OBJECT MODULE PLACED IN .\build\STC8x_PCA.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\..\libraries\peripherals\STC8x\src\STC8x_PCA.c LARGE OMF2 OPTIMIZE(9,
                    -SPEED) BROWSE INCDIR(..\..\libraries;..\..\libraries\core;..\..\libraries\core\register\STC8x;..\..\libraries\core\start
                    -up\STC8x;..\..\libraries\drives;..\..\libraries\drives\KeyScan;..\..\libraries\peripherals;..\..\libraries\peripherals\S
                    -TC8x\inc;..\..\libraries\peripherals\STC8x\src;..\..\libraries\components;..\..\libraries\components\TMT;..\..\libraries
                    -\components\PrintfRed;..\..\libraries\components\PreDelay;.\main;.\application) DEBUG PRINT(.\build\STC8x_PCA.lst) OBJEC
                    -T(.\build\STC8x_PCA.obj)

line level    source

   1          /*-----------------------------------------------------------------------
   2          |                            FILE DESCRIPTION                           |
   3          -----------------------------------------------------------------------*/
   4          /*----------------------------------------------------------------------
   5            - File name     : STC8x_PCA.c
   6            - Author        : zeweni
   7            - Update date   : 2020.04.27
   8            -     Copyright(C)  : 2020-2021 zeweni. All rights reserved.
   9          -----------------------------------------------------------------------*/
  10          /*------------------------------------------------------------------------
  11          |                            COPYRIGHT NOTICE                            |
  12          ------------------------------------------------------------------------*/
  13          /*
  14           * Copyright (C) 2021, zeweni (17870070675@163.com)
  15          
  16           * This file is part of 8051 ELL low-layer libraries.
  17          
  18           * 8051 ELL low-layer libraries is free software: you can redistribute 
  19           * it and/or modify it under the terms of the Apache-2.0 License.
  20          
  21           * 8051 ELL low-layer libraries is distributed in the hope that it will 
  22           * be useful,but WITHOUT ANY WARRANTY; without even the implied warranty 
  23           * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
  24           * Apache-2.0 License for more details.
  25          
  26           * You should have received a copy of the Apache-2.0 License.8051 ELL 
  27           * low-layer libraries. If not, see <http://www.apache.org/licenses/>.
  28          **/
  29          /*-----------------------------------------------------------------------
  30          |                               INCLUDES                                |
  31          -----------------------------------------------------------------------*/
  32          #include "STC8x_PCA.h"
  33          
  34          /*-----------------------------------------------------------------------
  35          |                                 DATA                                  |
  36          -----------------------------------------------------------------------*/
  37          
  38          static vuint16_t PCA_Value[4];
  39          static vuint16_t PCA_Rvalue[4];
  40          
  41          /*-----------------------------------------------------------------------
  42          |                               FUNCTION                                |
  43          -----------------------------------------------------------------------*/
  44          #if (PER_LIB_PCA_CTRL == 1)
  45          
  46                  #if (PER_LIB_MCU_MUODEL == STC8Ax || PER_LIB_MCU_MUODEL == STC8Gx )
  47                          
  48                          #if (PER_LIB_PCA_INIT_CTRL == 1)
  49          
  50                                  /**
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 2   

  51                                   * @brief     PCA计数器初始化,必须放在所有PCA函数的后面。
  52                                   * @details   PCA counter init function,It must be initialized last.
  53                                   * @param[in] clkSrc PCA时钟源。PCA clock source.
  54                                   * @param[in] run 使能控制位.enable control.
  55                                   * @return    FSC_SUCCESS 返回成功。Return to success.
  56                                   * @return    FSC_FAIL    返回失败。Return to fail.
  57                                  **/
  58                                  FSCSTATE PCA_CNT_Init(PCACLKSrc_Type clkSrc,BOOL run) 
  59                                  {
  60   1                                      CMOD = (CMOD & 0xF1)|(clkSrc);
  61   1                                      CL = 0;
  62   1                                      CH = 0;
  63   1                                      CR = run;
  64   1                                      return FSC_SUCCESS;
  65   1                              }
  66          
  67                                  
  68                                  /**
  69                                   * @brief     PCA0做PWM初始化,必须放在PCA计数器初始化之前。
  70                                   * @details   PCA0 PWM init function,it must first is initialized.
  71                                   * @param[in] pwmBits   PWM分辨率。PWM accuracy of bits.
  72                                   * @param[in] duty      PWM占空比。PWM duty.
  73                                   * @return    FSC_SUCCESS 返回成功。Return to success.
  74                                   * @return    FSC_FAIL    返回失败。Return to fail.
  75                                  **/
  76                                  FSCSTATE PCA0_PWM_Init(PCA_PWMBits_Type pwmBits,uint16_t duty) 
  77                                  {
  78   1                                      CCAPM0 = PCA_TYPE_PWM;
  79   1                                      PCA_PWM0 = (PCA_PWM0 & 0x3F)|(pwmBits << 6);
  80   1                                              if(pwmBits == PCA_PWM_6Bits)
  81   1                                              {
  82   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFE) | ((duty & 0x40) >> 6); //EPC0L
  83   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFD) | ((duty & 0x40) >> 5); //EPC0H                    
  84   2                                                      CCAP0L = (uint8_t)(duty & 0x003F);
  85   2                                                      CCAP0H = (uint8_t)(duty & 0x003F);
  86   2                                              }
  87   1                                              else if(pwmBits == PCA_PWM_7Bits)
  88   1                                              {
  89   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFE) | ((duty & 0x80) >> 7); //EPC0L
  90   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFD) | ((duty & 0x80) >> 6); //EPC0H                    
  91   2                                                      CCAP0L = (uint8_t)(duty & 0x007F);
  92   2                                                      CCAP0H = (uint8_t)(duty & 0x007F);                              
  93   2                                              }
  94   1                                              else if(pwmBits == PCA_PWM_8Bits)
  95   1                                              {       
  96   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFE) | ((duty & 0x100) >> 8); //EPC0L
  97   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFD) | ((duty & 0x100) >> 7); //EPC0H                   
  98   2                                                      CCAP0L = (uint8_t)duty;
  99   2                                                      CCAP0H = (uint8_t)duty;                                                 
 100   2                                              }
 101   1                                              else if(pwmBits == PCA_PWM_10Bits)
 102   1                                              {
 103   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFE) | ((duty & 0x400) >> 10); //EPC0L
 104   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XFD) | ((duty & 0x400) >> 9); //EPC0H                                   
 105   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XF3) | ((duty & 0x300) >> 6); //XCCAP0L
 106   2                                                      PCA_PWM0 = (PCA_PWM0 & 0XCF) | ((duty & 0x300) >> 4); //XCCAP0H 
 107   2                                                      CCAP0L = (uint8_t)duty;
 108   2                                                      CCAP0H = (uint8_t)duty;                                                 
 109   2                                              }
 110   1                                              else  return FSC_FAIL;
 111   1                                                      
 112   1                                      return FSC_SUCCESS;
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 3   

 113   1                              }
 114          
 115                                  /**
 116                                   * @brief     PCA1做PWM初始化,必须放在PCA计数器初始化之前。
 117                                   * @details   PCA1 PWM init function,it must first is initialized.
 118                                   * @param[in] pwmBits   PWM分辨率。PWM accuracy of bits.
 119                                   * @param[in] duty      PWM占空比。PWM duty.
 120                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 121                                   * @return    FSC_FAIL    返回失败。Return to fail.
 122                                  **/
 123                                  FSCSTATE PCA1_PWM_Init(PCA_PWMBits_Type pwmBits,uint16_t duty) 
 124                                  {
 125   1                                      CCAPM1 = PCA_TYPE_PWM;
 126   1                                      PCA_PWM1 = (PCA_PWM1 & 0x3F)|(pwmBits << 6);
 127   1                                      if(pwmBits == PCA_PWM_6Bits)
 128   1                                      {
 129   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFE) | ((duty & 0x40) >> 6); //EPC0L
 130   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFD) | ((duty & 0x40) >> 5); //EPC0H                    
 131   2                                              CCAP1L = (uint8_t)(duty & 0x003F);
 132   2                                              CCAP1H = (uint8_t)(duty & 0x003F);       
 133   2                                      }
 134   1                                      else if(pwmBits == PCA_PWM_7Bits)
 135   1                                      {
 136   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFE) | ((duty & 0x80) >> 7); //EPC0L
 137   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFD) | ((duty & 0x80) >> 6); //EPC0H                    
 138   2                                              CCAP1L = (uint8_t)(duty & 0x007F);
 139   2                                              CCAP1H = (uint8_t)(duty & 0x007F);
 140   2                                      }
 141   1                                      else if(pwmBits == PCA_PWM_8Bits)
 142   1                                      {       
 143   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFE) | ((duty & 0x100) >> 8); //EPC0L
 144   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFD) | ((duty & 0x100) >> 7); //EPC0H                   
 145   2                                              CCAP1L = (uint8_t)duty;
 146   2                                              CCAP1H = (uint8_t)duty;
 147   2                                      }
 148   1                                      else if(pwmBits == PCA_PWM_10Bits)
 149   1                                      {
 150   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFE) | ((duty & 0x400) >> 10); //EPC0L
 151   2                                              PCA_PWM1 = (PCA_PWM1 & 0XFD) | ((duty & 0x400) >> 9); //EPC0H                                   
 152   2                                              PCA_PWM1 = (PCA_PWM1 & 0XF3) | ((duty & 0x300) >> 6); //XCCAP0L
 153   2                                              PCA_PWM1 = (PCA_PWM1 & 0XCF) | ((duty & 0x300) >> 4); //XCCAP0H 
 154   2                                              CCAP1L = (uint8_t)duty;
 155   2                                              CCAP1H = (uint8_t)duty;                                                 
 156   2                                      }
 157   1                                      else  return FSC_FAIL;
 158   1                                                      
 159   1                                      return FSC_SUCCESS;
 160   1                              }
 161          
 162                                  
 163                                  /**
 164                                   * @brief     PCA2做PWM初始化,必须放在PCA计数器初始化之前。
 165                                   * @details   PCA2 PWM init function,it must first is initialized.
 166                                   * @param[in] pwmBits   PWM分辨率。PWM accuracy of bits.
 167                                   * @param[in] duty      PWM占空比。PWM duty.
 168                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 169                                   * @return    FSC_FAIL    返回失败。Return to fail.
 170                                  **/
 171                                  FSCSTATE PCA2_PWM_Init(PCA_PWMBits_Type pwmBits,uint16_t duty) 
 172                                  {
 173   1                                      CCAPM2 = PCA_TYPE_PWM;
 174   1                                      PCA_PWM2 = (PCA_PWM2 & 0x3F)|(pwmBits << 6);
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 4   

 175   1                                      if(pwmBits == PCA_PWM_6Bits)
 176   1                                      {
 177   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFE) | ((duty & 0x40) >> 6); //EPC0L
 178   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFD) | ((duty & 0x40) >> 5); //EPC0H                    
 179   2                                              CCAP2L = (uint8_t)(duty & 0x003F);
 180   2                                              CCAP2H = (uint8_t)(duty & 0x003F);       
 181   2                                      }
 182   1                                      else if(pwmBits == PCA_PWM_7Bits)
 183   1                                      {
 184   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFE) | ((duty & 0x80) >> 7); //EPC0L
 185   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFD) | ((duty & 0x80) >> 6); //EPC0H                    
 186   2                                              CCAP2L = (uint8_t)(duty & 0x007F);
 187   2                                              CCAP2H = (uint8_t)(duty & 0x007F);                      
 188   2                                      }
 189   1                                      else if(pwmBits == PCA_PWM_8Bits)
 190   1                                      {       
 191   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFE) | ((duty & 0x100) >> 8); //EPC0L
 192   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFD) | ((duty & 0x100) >> 7); //EPC0H                   
 193   2                                              CCAP2L = (uint8_t)duty;
 194   2                                              CCAP2H = (uint8_t)duty;                                                 
 195   2                                      }
 196   1                                      else if(pwmBits == PCA_PWM_10Bits)
 197   1                                      {
 198   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFE) | ((duty & 0x400) >> 10); //EPC0L
 199   2                                              PCA_PWM2 = (PCA_PWM2 & 0XFD) | ((duty & 0x400) >> 9); //EPC0H                                   
 200   2                                              PCA_PWM2 = (PCA_PWM2 & 0XF3) | ((duty & 0x300) >> 6); //XCCAP0L
 201   2                                              PCA_PWM2 = (PCA_PWM2 & 0XCF) | ((duty & 0x300) >> 4); //XCCAP0H 
 202   2                                              CCAP2L = (uint8_t)duty;
 203   2                                              CCAP2H = (uint8_t)duty;                                                 
 204   2                                      }
 205   1                                      else  return FSC_FAIL;
 206   1                                                      
 207   1                                      return FSC_SUCCESS;
 208   1                              }
 209          
 210                                  #if (PER_LIB_MCU_MUODEL == STC8Ax)
              
                                              /**
                                               * @brief     PCA3做PWM初始化,必须放在PCA计数器初始化之前。
                                               * @details   PCA3 PWM init function,it must first is initialized.
                                               * @param[in] pwmBits   PWM分辨率。PWM accuracy of bits.
                                               * @param[in] duty      PWM占空比。PWM duty.
                                               * @return    FSC_SUCCESS 返回成功。Return to success.
                                               * @return    FSC_FAIL    返回失败。Return to fail.
                                              **/
                                              FSCSTATE PCA3_PWM_Init(PCA_PWMBits_Type pwmBits,uint16_t duty) 
                                              {
                                                      CCAPM3 = PCA_TYPE_PWM;
                                                      PCA_PWM3 = (PCA_PWM3 & 0x3F)|(pwmBits << 6);
                                                      if(pwmBits == PCA_PWM_6Bits)
                                                      {
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFE) | ((duty & 0x0040) >> 6); //EPC0L
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFD) | ((duty & 0x0040) >> 5); //EPC0H                  
                                                              CCAP3L = (uint8_t)(duty & 0x003F);
                                                              CCAP3H = (uint8_t)(duty & 0x003F);               
                                                      }
                                                      else if(pwmBits == PCA_PWM_7Bits)
                                                      {
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFE) | ((duty & 0x0080) >> 7); //EPC0L
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFD) | ((duty & 0x0080) >> 6); //EPC0H                  
                                                              CCAP2L = (uint8_t)(duty & 0x007F);
                                                              CCAP2H = (uint8_t)(duty & 0x007F);       
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 5   

                                                      }
                                                      else if(pwmBits == PCA_PWM_8Bits)
                                                      {       
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFE) | ((duty & 0x0100) >> 8); //EPC0L
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFD) | ((duty & 0x0100) >> 7); //EPC0H                  
                                                              CCAP3L = (uint8_t)duty;
                                                              CCAP3H = (uint8_t)duty;
                                                      }
                                                      else if(pwmBits == PCA_PWM_10Bits)
                                                      {
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFE) | ((duty & 0x0400) >> 10); //EPC0L
                                                              PCA_PWM3 = (PCA_PWM3 & 0XFD) | ((duty & 0x0400) >> 9); //EPC0H                                  
                                                              PCA_PWM3 = (PCA_PWM3 & 0XF3) | ((duty & 0x0300) >> 6); //XCCAP0L
                                                              PCA_PWM3 = (PCA_PWM3 & 0XCF) | ((duty & 0x0300) >> 4); //XCCAP0H        
                                                              CCAP3L = (uint8_t)duty;
                                                              CCAP3H = (uint8_t)duty;                                                 
                                                      }
                                                      else  return FSC_FAIL;
              
                                                      return FSC_SUCCESS;
                                              }
                                              
                                      #endif
 260          
 261                                  /**
 262                                   * @brief     PCA0做TIMER初始化,必须放在PCA计数器初始化之前。
 263                                   * @details   PCA0 TIMER init function,it must first is initialized.
 264                                   * @param[in] time  定时时间。Timing.
 265                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 266                                   * @return    FSC_FAIL    返回失败。Return to fail.
 267                                  **/
 268                                  FSCSTATE PCA0_TIM_Init(uint16_t time) 
 269                                  {
 270   1                                      extern uint32_t Get_SysClk_FRE(void);
 271   1                                      uint32_t sysClk_FRE;
 272   1                                      /* Get system clock frequency */
 273   1                                      sysClk_FRE = Get_SysClk_FRE();
 274   1                                      CCAPM0 = PCA_TYPE_TIM;
 275   1                                      time = sysClk_FRE / (12000000UL / time);
 276   1                                      PCA_Value[0] = time;
 277   1                                      CCAP0L = time;
 278   1                                      CCAP0H = time >> 8;
 279   1                                      return FSC_SUCCESS;
 280   1                              }
 281          
 282                                  
 283                                  /**
 284                                   * @brief     PCA1做TIMER初始化,必须放在PCA计数器初始化之前。
 285                                   * @details   PCA1 TIMER init function,it must first is initialized.
 286                                   * @param[in] time  定时时间。Timing.
 287                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 288                                   * @return    FSC_FAIL    返回失败。Return to fail.
 289                                  **/
 290                                  FSCSTATE PCA1_TIM_Init(uint16_t time) 
 291                                  {
 292   1                                      extern uint32_t Get_SysClk_FRE(void);
 293   1                                      uint32_t sysClk_FRE;
 294   1                                      /* Get system clock frequency */
 295   1                                      sysClk_FRE = Get_SysClk_FRE();
 296   1                                      CCAPM1 = PCA_TYPE_TIM;
 297   1                                      time = sysClk_FRE / (12000000UL / time);
 298   1                                      PCA_Value[1] = time;
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 6   

 299   1                                      CCAP1L = time;
 300   1                                      CCAP1H = time >> 8;
 301   1                                      return FSC_SUCCESS;
 302   1                              }
 303          
 304                                  
 305                                  /**
 306                                   * @brief     PCA2做TIMER初始化,必须放在PCA计数器初始化之前。
 307                                   * @details   PCA2 TIMER init function,it must first is initialized.
 308                                   * @param[in] time  定时时间。Timing.
 309                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 310                                   * @return    FSC_FAIL    返回失败。Return to fail.
 311                                  **/
 312                                  FSCSTATE PCA2_TIM_Init(uint16_t time) 
 313                                  {
 314   1                                      extern uint32_t Get_SysClk_FRE(void);
 315   1                                      uint32_t sysClk_FRE;
 316   1                                      /* Get system clock frequency */
 317   1                                      sysClk_FRE = Get_SysClk_FRE();
 318   1                                      CCAPM2 = PCA_TYPE_TIM;
 319   1                                      time = sysClk_FRE / (12000000UL / time);
 320   1                                      PCA_Value[2] = time;
 321   1                                      CCAP2L = time;
 322   1                                      CCAP2H = time >> 8;
 323   1                                      return FSC_SUCCESS;
 324   1                              }
 325          
 326                                  #if (PER_LIB_MCU_MUODEL == STC8Ax)
              
                                      
                                              /**
                                               * @brief     PCA3做TIMER初始化,必须放在PCA计数器初始化之前。
                                               * @details   PCA3 TIMER init function,it must first is initialized.
                                               * @param[in] time  定时时间。Timing.
                                               * @return    FSC_SUCCESS 返回成功。Return to success.
                                               * @return    FSC_FAIL    返回失败。Return to fail.
                                              **/
                                              FSCSTATE PCA3_TIM_Init(uint16_t time) 
                                              {
                                                      extern uint32_t Get_SysClk_FRE(void);
                                                      uint32_t sysClk_FRE;
                                                      /** Get system clock frequency */
                                                      sysClk_FRE = Get_SysClk_FRE();
                                                      CCAPM3 = PCA_TYPE_TIM;
                                                      time = sysClk_FRE / (12000000UL / time);
                                                      PCA_Value[3] = time;
                                                      CCAP3L = time;
                                                      CCAP3H = time >> 8;
                                                      return FSC_SUCCESS;
                                              }
                                              
                                      #endif
 351          
 352                                          
 353                                  /**
 354                                   * @brief     PCA0做POP初始化,必须放在PCA计数器初始化之前。
 355                                   * @details   PCA0 POP init function,it must first is initialized.
 356                                   * @param[in] fre  脉冲输出频率。Output frequency.
 357                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 358                                   * @return    FSC_FAIL    返回失败。Return to fail.
 359                                  **/
 360                                  FSCSTATE PCA0_POP_Init(uint16_t fre) 
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 7   

 361                                  {
 362   1                                      extern uint32_t Get_SysClk_FRE(void);
 363   1                                      uint32_t sysClk_FRE;
 364   1                                      /* Get system clock frequency */
 365   1                                      sysClk_FRE = Get_SysClk_FRE();
 366   1                                      CCAPM0 = PCA_TYPE_POP;
 367   1                                      fre = sysClk_FRE / (12UL / fre);
 368   1                                      PCA_Value[0] = fre;
 369   1                                      CCAP0L = fre;
 370   1                                      CCAP0H = fre >> 8;
 371   1                                      return FSC_SUCCESS;
 372   1                              }
 373          
 374                                  
 375                                  /**
 376                                   * @brief     PCA1做POP初始化,必须放在PCA计数器初始化之前。
 377                                   * @details   PCA1 POP init function,it must first is initialized.
 378                                   * @param[in] fre  脉冲输出频率。Output frequency.
 379                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 380                                   * @return    FSC_FAIL    返回失败。Return to fail.
 381                                  **/
 382                                  FSCSTATE PCA1_POP_Init(uint16_t fre) 
 383                                  {
 384   1                                      extern uint32_t Get_SysClk_FRE(void);
 385   1                                      uint32_t sysClk_FRE;
 386   1                                      /* Get system clock frequency */
 387   1                                      sysClk_FRE = Get_SysClk_FRE();
 388   1                                      CCAPM1 = PCA_TYPE_POP;
 389   1                                      fre = sysClk_FRE / (12UL / fre);
 390   1                                      PCA_Value[1] = fre;
 391   1                                      CCAP1L = fre;
 392   1                                      CCAP1H = fre >> 8;
 393   1                                      return FSC_SUCCESS;
 394   1                              }
 395          
 396                                  
 397                                  /**
 398                                   * @brief     PCA2做POP初始化,必须放在PCA计数器初始化之前。
 399                                   * @details   PCA2 POP init function,it must first is initialized.
 400                                   * @param[in] fre  脉冲输出频率。Output frequency.
 401                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 402                                   * @return    FSC_FAIL    返回失败。Return to fail.
 403                                  **/
 404                                  FSCSTATE PCA2_POP_Init(uint16_t fre) 
 405                                  {
 406   1                                      extern uint32_t Get_SysClk_FRE(void);
 407   1                                      uint32_t sysClk_FRE;
 408   1                                      /* Get system clock frequency */
 409   1                                      sysClk_FRE = Get_SysClk_FRE();
 410   1                                      CCAPM2 = PCA_TYPE_POP;
 411   1                                      fre = sysClk_FRE / (12UL / fre);
 412   1                                      PCA_Value[2] = fre;
 413   1                                      CCAP2L = fre;
 414   1                                      CCAP2H = fre >> 8;
 415   1                                      return FSC_SUCCESS;
 416   1                              }
 417          
 418                                  #if (PER_LIB_MCU_MUODEL == STC8Ax)
              
                                      
                                              /**
                                               * @brief     PCA3做POP初始化,必须放在PCA计数器初始化之前。
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 8   

                                               * @details   PCA3 POP init function,it must first is initialized.
                                               * @param[in] fre  脉冲输出频率。Output frequency.
                                               * @return    FSC_SUCCESS 返回成功。Return to success.
                                               * @return    FSC_FAIL    返回失败。Return to fail.
                                              **/
                                              FSCSTATE PCA3_POP_Init(uint16_t fre) 
                                              {
                                                      extern uint32_t Get_SysClk_FRE(void);
                                                      uint32_t sysClk_FRE;
                                                      /* Get system clock frequency */
                                                      sysClk_FRE = Get_SysClk_FRE();
                                                      CCAPM3 = PCA_TYPE_POP;
                                                      fre = sysClk_FRE / (12UL / fre);
                                                      PCA_Value[3] = fre;
                                                      CCAP3L = fre;
                                                      CCAP3H = fre >> 8;
                                                      return FSC_SUCCESS;
                                              }
                                      #endif
 442          
 443                                          
 444                                  /**
 445                                   * @brief     PCA0做CAP初始化,必须放在PCA计数器初始化之前。
 446                                   * @details   PCA0 CAP init function,it must first is initialized.
 447                                   * @param[in] mode  捕获模式。Capture mode.
 448                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 449                                   * @return    FSC_FAIL    返回失败。Return to fail.
 450                                  **/
 451                                  FSCSTATE PCA0_CAP_Init(PCA_CAPMode_Type mode) 
 452                                  {
 453   1                                      CCAPM0 = PCA_TYPE_CAP;
 454   1                                      CCAPM0 = mode << 4;
 455   1                                      CCAP0L = 0;
 456   1                                      CCAP0H = 0;
 457   1                                      return FSC_SUCCESS;
 458   1                              }
 459          
 460                                  
 461                                  /**
 462                                   * @brief     PCA1做CAP初始化,必须放在PCA计数器初始化之前。
 463                                   * @details   PCA1 CAP init function,it must first is initialized.
 464                                   * @param[in] mode  捕获模式。Capture mode.
 465                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 466                                   * @return    FSC_FAIL    返回失败。Return to fail.
 467                                  **/
 468                                  FSCSTATE PCA1_CAP_Init(PCA_CAPMode_Type mode) 
 469                                  {
 470   1                                      CCAPM1 = PCA_TYPE_CAP;
 471   1                                      CCAPM1 = mode << 4;
 472   1                                      CCAP1L = 0;
 473   1                                      CCAP1H = 0;
 474   1                                      return FSC_SUCCESS;
 475   1                              }
 476          
 477                                  
 478                                  /**
 479                                   * @brief     PCA2做CAP初始化,必须放在PCA计数器初始化之前。
 480                                   * @details   PCA2 CAP init function,it must first is initialized.
 481                                   * @param[in] mode  捕获模式。Capture mode.
 482                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 483                                   * @return    FSC_FAIL    返回失败。Return to fail.
 484                                  **/
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 9   

 485                                  FSCSTATE PCA2_CAP_Init(PCA_CAPMode_Type mode) 
 486                                  {
 487   1                                      CCAPM2 = PCA_TYPE_CAP;
 488   1                                      CCAPM2 = mode << 4;
 489   1                                      CCAP2L = 0;
 490   1                                      CCAP2H = 0;
 491   1                                      return FSC_SUCCESS;
 492   1                              }
 493          
 494                                  #if (PER_LIB_MCU_MUODEL == STC8Ax)
              
                                      
                                              /**
                                               * @brief     PCA3做CAP初始化,必须放在PCA计数器初始化之前。
                                               * @details   PCA3 CAP init function,it must first is initialized.
                                               * @param[in] mode  捕获模式。Capture mode.
                                               * @return    FSC_SUCCESS 返回成功。Return to success.
                                               * @return    FSC_FAIL    返回失败。Return to fail.
                                              **/
                                              FSCSTATE PCA3_CAP_Init(PCA_CAPMode_Type mode) 
                                              {
                                                      CCAPM3 = PCA_TYPE_CAP;
                                                      CCAPM3 = mode << 4;
                                                      CCAP3L = 0;
                                                      CCAP3H = 0;
                                                      return FSC_SUCCESS;
                                              }
                                              
                                      #endif
 514                                          
 515                          #endif
 516          
 517                  #if (PER_LIB_PCA_NVIC_CTRL == 1)
 518                                          
 519                                          
 520                                  /**
 521                                   * @brief     PCA计数器中断初始化函数。
 522                                   * @details   PCA Counter NVIC function.   
 523                                   * @param[in] pri 中断优先级。interrupt priority.
 524                                   * @param[in] run 使能控制位。enable control. 
 525                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 526                                   * @return    FSC_FAIL    返回失败。Return to fail.
 527                                  **/
 528                                  FSCSTATE NVIC_PCA_CNT_Init(NVICPri_Type pri,BOOL run)
 529                                  {
 530   1                                      CMOD = (CMOD & 0xFE) | run;
 531   1                                      NVIC_PCA_PRI(pri);
 532   1                                      return FSC_SUCCESS;
 533   1                              }
 534          
 535          
 536                                  /**
 537                                   * @brief     PCA0做TIMER或POP中断初始化函数。
 538                                   * @details   PCA0 Timer and POP NVIC function .  
 539                                   * @param[in] run 使能控制位。enable control. 
 540                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 541                                   * @return    FSC_FAIL    返回失败。Return to fail.
 542                                  **/
 543                                  FSCSTATE NVIC_PCA0_TIM_POP_Init(BOOL run)
 544                                  {
 545   1                                      CCAPM0 = (CCAPM0 & 0xFE) | (run);
 546   1                                      return FSC_SUCCESS;
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 10  

 547   1                              }
 548          
 549                                  
 550                                  /**
 551                                   * @brief     PCA1做TIMER或POP中断初始化函数。
 552                                   * @details   PCA1 Timer and POP NVIC function .  
 553                                   * @param[in] run 使能控制位。enable control. 
 554                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 555                                   * @return    FSC_FAIL    返回失败。Return to fail.
 556                                  **/
 557                                  FSCSTATE NVIC_PCA1_TIM_POP_Init(BOOL run)
 558                                  {
 559   1                                      CCAPM1 = (CCAPM1 & 0xFE) | (run);
 560   1                                      return FSC_SUCCESS;
 561   1                              }
 562          
 563                                  
 564                                  /**
 565                                   * @brief     PCA2做TIMER或POP中断初始化函数。
 566                                   * @details   PCA2 Timer and POP NVIC function .  
 567                                   * @param[in] run 使能控制位。enable control. 
 568                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 569                                   * @return    FSC_FAIL    返回失败。Return to fail.
 570                                  **/
 571                                  FSCSTATE NVIC_PCA2_TIM_POP_Init(BOOL run)
 572                                  {
 573   1                                      CCAPM2 = (CCAPM2 & 0xFE) | (run);
 574   1                                      return FSC_SUCCESS;
 575   1                              }
 576          
 577          
 578                                  #if (PER_LIB_MCU_MUODEL == STC8Ax)
              
                                              /**
                                               * @brief     PCA3做TIMER或POP中断初始化函数。
                                               * @details   PCA3 Timer and POP NVIC function .  
                                               * @param[in] run 使能控制位。enable control. 
                                               * @return    FSC_SUCCESS 返回成功。Return to success.
                                               * @return    FSC_FAIL    返回失败。Return to fail.
                                              **/
                                              FSCSTATE NVIC_PCA3_TIM_POP_Init(BOOL run)
                                              {
                                                      CCAPM3 = (CCAPM3 & 0xFE) | (run);
                                                      return FSC_SUCCESS;
                                              }
              
                                      #endif
 594          
 595          
 596                                  /**
 597                                   * @brief     PCA0做PWM或CAP中断初始化函数。
 598                                   * @details   PCA0 PWM and CAP NVIC function.  
 599                                   * @param[in] triMode  触发模式。 Interrupt trigger mode. 
 600                                   * @param[in] run      使能控制位。enable control. 
 601                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 602                                   * @return    FSC_FAIL    返回失败。Return to fail.
 603                                  **/
 604                                  FSCSTATE NVIC_PCA0_PWM_CAP_Init(PCA_CAPTri_Type triMode,BOOL run)
 605                                  {
 606   1                                      CCAPM0 = (CCAPM0 & 0xCE) | (triMode) | (run);
 607   1                                      return FSC_SUCCESS;
 608   1                              }
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 11  

 609          
 610                                  
 611                                  /**
 612                                   * @brief     PCA1做PWM或CAP中断初始化函数。
 613                                   * @details   PCA1 PWM and CAP NVIC function.  
 614                                   * @param[in] triMode  触发模式。 Interrupt trigger mode. 
 615                                   * @param[in] run      使能控制位。enable control. 
 616                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 617                                   * @return    FSC_FAIL    返回失败。Return to fail.
 618                                  **/
 619                                  FSCSTATE NVIC_PCA1_PWM_CAP_Init(PCA_CAPTri_Type triMode,BOOL run)
 620                                  {
 621   1                                      CCAPM1 = (CCAPM1 & 0xCE) | (triMode) | (run);
 622   1                                      return FSC_SUCCESS;
 623   1                              }
 624          
 625                                  
 626                                  /**
 627                                   * @brief     PCA2做PWM或CAP中断初始化函数。
 628                                   * @details   PCA2 PWM and CAP NVIC function.  
 629                                   * @param[in] triMode  触发模式。 Interrupt trigger mode. 
 630                                   * @param[in] run      使能控制位。enable control. 
 631                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 632                                   * @return    FSC_FAIL    返回失败。Return to fail.
 633                                  **/
 634                                  FSCSTATE NVIC_PCA2_PWM_CAP_Init(PCA_CAPTri_Type triMode,BOOL run)
 635                                  {
 636   1                                      CCAPM2 = (CCAPM2 & 0xCE) | (triMode) | (run);
 637   1                                      return FSC_SUCCESS;
 638   1                              }
 639          
 640                                  #if (PER_LIB_MCU_MUODEL == STC8Ax)
              
                                      
                                              /**
                                               * @brief     PCA3做PWM或CAP中断初始化函数。
                                               * @details   PCA3 PWM and CAP NVIC function.  
                                               * @param[in] triMode  触发模式。 Interrupt trigger mode. 
                                               * @param[in] run      使能控制位。enable control. 
                                               * @return    FSC_SUCCESS 返回成功。Return to success.
                                               * @return    FSC_FAIL    返回失败。Return to fail.
                                              **/
                                              FSCSTATE NVIC_PCA3_PWM_CAP_Init(PCA_CAPTri_Type triMode,BOOL run)
                                              {
                                                      CCAPM3 = (CCAPM3 & 0xCE) | (triMode) | (run);
                                                      return FSC_SUCCESS;
                                              }
              
                                      #endif
 658                                          
 659                          #endif
 660                                          
 661                                          
 662                          #if (PER_LIB_PCA_WORK_CTRL == 1)
 663                                  
 664                                  /**
 665                                   * @brief     PCA0做TIMER或POP时，重载载计数器。
 666                                   * @details   PCA0 TIM and POP reload value function.
 667                                   * @param[in] None.
 668                                   * @return    None.
 669                                  **/
 670                                  void PCA0_TIM_POP_ReValue(void)
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 12  

 671                                  {
 672   1                                      PCA_Rvalue[0] += PCA_Value[0];
 673   1                                      CCAP0L = PCA_Rvalue[0];
 674   1                                      CCAP0H = PCA_Rvalue[0] >> 8;
 675   1                              }
 676          
 677                                  
 678                                  /**
 679                                   * @brief     PCA1做TIMER或POP时，重载载计数器。
 680                                   * @details   PCA0 TIM and POP reload value function.
 681                                   * @param[in] None.
 682                                   * @return    None.
 683                                  **/
 684                                  void PCA1_TIM_POP_ReValue(void)
 685                                  {
 686   1                                      PCA_Rvalue[1] += PCA_Value[1];
 687   1                                      CCAP1L = PCA_Rvalue[1];
 688   1                                      CCAP1H = PCA_Rvalue[1] >> 8;
 689   1                              }
 690          
 691                                  
 692                                  /**
 693                                   * @brief     PCA2做TIMER或POP时，重载载计数器。
 694                                   * @details   PCA2 TIM and POP reload value function.
 695                                   * @param[in] None.
 696                                   * @return    None.
 697                                  **/
 698                                  void PCA2_TIM_POP_ReValue(void)
 699                                  {
 700   1                                      PCA_Rvalue[2] += PCA_Value[2];
 701   1                                      CCAP2L = PCA_Rvalue[2];
 702   1                                      CCAP2H = PCA_Rvalue[2] >> 8;
 703   1                              }
 704          
 705                                  #if (PER_LIB_MCU_MUODEL == STC8Ax)
              
                                              /**
                                               * @brief     PCA3做TIMER或POP时，重载载计数器。
                                               * @details   PCA3 TIM and POP reload value function.
                                               * @param[in] None.
                                               * @return    None.
                                              **/
                                              void PCA3_TIM_POP_ReValue(void)
                                              {
                                                      PCA_Rvalue[3] += PCA_Value[3];
                                                      CCAP3L = PCA_Rvalue[3];
                                                      CCAP3H = PCA_Rvalue[3] >> 8;
                                              }
                                              
                                      #endif
 721                                          
 722                                  /**
 723                                   * @brief     PCA切换复用IO函数。
 724                                   * @details   PCA switch out port control function.  
 725                                   * @param[in] port 复用IO枚举体。IO switch enumerator.
 726                                   * @return    FSC_SUCCESS 返回成功。Return to success.
 727                                   * @return    FSC_FAIL    返回失败。Return to fail.
 728                                  **/
 729                                  FSCSTATE GPIO_PCA_SWPort(GPIOSWPort_Type port)
 730                                  {
 731   1                                      #if (PER_LIB_MCU_MUODEL == STC8Gx)
 732   1                                      if(port > SW_Port3) return FSC_FAIL;
C51 COMPILER V9.01   STC8X_PCA                                                             08/04/2021 11:57:18 PAGE 13  

 733   1                                      #endif
 734   1                                      P_SW1 = (P_SW1 & 0xCF) | (port << 4);
 735   1                                      return FSC_SUCCESS;
 736   1                              }
 737                                  
 738                          #endif
 739                                  
 740                  #endif
 741                          
 742          #endif
 743          /*-----------------------------------------------------------------------
 744          |                   END OF FLIE.  (C) COPYRIGHT zeweni                  |
 745          -----------------------------------------------------------------------*/
 746          
 747          
 748          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1318    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     16      36
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
